/* Abstracts */
/* Typography */
/*
Breakpoints:
0    - 600px   Phone
600  - 900px   Tablet (Portrait)
900  - 1200px  Tablet (Landscape)
1200 - 1800px  Desktop, assume to be normal state

1800px +       Big desktop

breakpoint argument choices:
- phone 
- tab-port
- tab-land
- desktop (Not included, is expected to be the normal state)
- big-desktop

ORDER: Base + typography > general layout + grid > page layout > components
*/
/* Themes */
/* 
	Contains values that span over different themes.
	These variables can be overridden in the separate theme files.
*/
/* 
	This mixin transfers SASS variables to CSS-variables,
	which makes it possible to toggle the whole theme using a single class.
*/
/* Generate the light theme CSS-variables */
/* Light theme variables */
:root {
  --color-page-background: #f0f2f5;
  --color-text: #000;
  --color-heading: #2196F3;
  --color-panel: white;
  --color-button-background: #e4e6ec;
  --color-button-background-hover: #d0d2d8;
  --color-button-add-background: #2196F3;
  --color-button-add-background-hover: #4dafff;
  --color-button-add-text: white;
  --color-button-add-text-hover: white;
  --color-button-text: #1c1e21;
  --color-button-text-hover: #1c1e21;
  --color-border-separator: #ccc;
  --color-input-text-background: #e4e6ec;
  --color-input-text-background-hover: #eef0f6;
  --color-input-text-placeholder: #999;
  --color-input-text-border-focus: #2196F3;
  --color-switch-background: #ccc;
  --color-switch-active: #2196F3;
}

/* Generate the dark theme CSS-variables */
/* Dark theme variables */
/*
	Structure

	THEME colors, which are base colors that the theme relies on, should have three variants (regular, light and dark).
	Black, white or gray colors do not count as theme colors.	
	ex. 
	primary - [$color-primary, $color-primary-light, $color-primary-dark]
	secondary - [$color-secondary, $color-secondary-light, $color-secondary-dark]

	FORM colors, are colors that are used for input elements.
	They are used for elements such as inputs, buttons, panels and knobs.
	These should be able to be refined to:
		border, background, placeholder

	Certain elements should have state variables:
		valid, invalid, regular, hover, focus, disabled

	LAYOUT colors are colors that are used for sigificant areas of the layout. 
	ex.
	header, footer, nav, cards etc

	TODO: Have a look at https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss

*/
.dark {
  --color-page-background: #18191a;
  --color-text: #ccc;
  --color-heading: #F39621;
  --color-panel: #242526;
  --color-button-background: rgba(255, 255, 255, 0.1);
  --color-button-background-hover: rgba(255, 255, 255, 0.25);
  --color-button-add-background: #F39621;
  --color-button-add-background-hover: #f6ae55;
  --color-button-add-text: white;
  --color-button-add-text-hover: white;
  --color-button-text: #e4e6eb;
  --color-button-text-hover: #e4e6eb;
  --color-border-separator: #444;
  --color-input-text-background: rgba(255, 255, 255, 0.1);
  --color-input-text-background-hover: rgba(255, 255, 255, 0.25);
  --color-input-text-placeholder: #999;
  --color-input-text-border-focus: #F39621;
  --color-switch-background: #ccc;
  --color-switch-active: #2196F3;
}

/* Base */
/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role=list],
ol[role=list] {
  list-style: none;
}

/* Set core root defaults */
html:focus-within {
  scroll-behavior: smooth;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
*::before,
*::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
.animation-color {
  transition: color 0.3s ease-in-out, background-color 0.4s ease-in-out;
}

html {
  /* This defines what 1 rem is.
     16 px is the default font size. 
     1 rem = (R)elative to font-size of the root (E)le(M)ment
     We want 1 rem = 10 px; Thus, 10px/16px = 62.5% */
  font-size: 62.5%;
}
@media (max-width: 75em) {
  html {
    font-size: 62.5%;
  }
}
@media (max-width: 56.25em) {
  html {
    font-size: 62.5%;
  }
}
@media (max-width: 37.5em) {
  html {
    font-size: 62.5%;
  }
}
@media (min-width: 112.5em) {
  html {
    font-size: 75%;
  }
}

body {
  background-color: var(--color-page-background);
  color: var(--color-text);
  padding: 2rem;
}

body {
  font-family: Arial, Helvetica, sans-serif;
  font-size: 1.6rem;
}

input, textarea, select,
h1, h2, h3, h4, h5, h6 {
  font-family: inherit;
}

h1, h2, h3, h4, h5, h6 {
  color: var(--color-heading);
  font-family: "Poppins", Arial, Helvetica, sans-serif;
}

h1 {
  font-size: 5rem;
  font-weight: 200;
  letter-spacing: -0.1rem;
}

h2 {
  font-size: 2rem;
}

p {
  font-family: inherit;
  font-size: 1.5rem;
  font-weight: 400;
}

.mt-1 {
  margin-top: 1rem;
}

.mt-2 {
  margin-top: 2rem;
}

/* Layout */
/* Pages */
/* Components */
.button {
  display: inline-block;
  border: 0;
  outline: none;
  background-color: var(--color-button-background);
  color: var(--color-button-text);
  padding: 1rem 2rem;
  font-family: Arial, Helvetica, sans-serif;
  font-size: 1.5rem;
  font-weight: 700;
  border-radius: 0.5rem;
  text-decoration: none;
}
.button:hover {
  background-color: var(--color-button-background-hover);
  color: var(--color-button-text-hover);
}
.button-add {
  background-color: var(--color-button-add-background);
  color: var(--color-button-add-text);
}
.button-add:hover {
  background-color: var(--color-button-add-background-hover);
  color: var(--color-button-add-text-hover);
}

.panel {
  padding: 4rem;
  margin-top: 2rem;
  margin-bottom: 2rem;
  background-color: var(--color-panel);
  border: 0;
  border-radius: 0.5rem;
  box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 2px 0px;
}

.switch {
  position: relative;
  display: inline-block;
  width: 56px;
  height: 30px;
}
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: var(--color-switch-background);
  transition: 0.4s;
}
.slider:before {
  position: absolute;
  content: "";
  height: 24px;
  width: 24px;
  left: 3px;
  bottom: 3px;
  background-color: white;
  transition: 0.4s;
}

input:checked + .slider {
  background-color: var(--color-switch-active);
}
input:checked + .slider:before {
  transform: translateX(25px);
}

input:focus + .slider {
  box-shadow: 0 0 1px var(--color-switch-active);
}

.slider.round {
  border-radius: 34px;
}
.slider.round:before {
  border-radius: 50%;
}

input[type=text] {
  border: 2px solid transparent;
  background-color: var(--color-input-text-background);
  color: var(--color-input-text-color);
  border-radius: 0.8rem;
  padding: 1.5rem 2rem;
  font-size: 1.9rem;
  font-weight: normal;
}
input[type=text]:focus {
  outline: none;
  background-color: var(--color-input-text-background-hover);
  transition: background-color 0.5s;
  border: 2px solid var(--color-input-text-border-focus);
}
input[type=text]:focus::placeholder {
  color: var(--color-input-text-placeholder);
}
input[type=text]::placeholder {
  color: var(--color-input-text-placeholder);
}

.globaltabs {
  position: absolute;
  display: block;
  top: 0;
  right: 0;
  height: 100%;
}
.globaltabs.active .globaltabs__index {
  right: 80rem;
}
.globaltabs.active .globaltabs__container {
  right: 0rem;
  width: 80rem;
  height: 100%;
  display: block;
  visibility: visible;
}
.globaltabs__index {
  display: flex;
  flex-direction: column;
  position: absolute;
  overflow: hidden;
  overflow-y: auto;
  top: 0;
  padding-top: 10px;
  right: 0;
  height: 100vh;
  width: 8rem;
}
.globaltabs__tab {
  background-color: orangered;
  margin-bottom: 2px;
}
.globaltabs__tab.active {
  background-color: #ccc;
}
.globaltabs__tab:hover {
  background-color: greenyellow;
}
.globaltabs__tab:hover .globaltabs__tab-close {
  visibility: visible;
}
.globaltabs__tab-close {
  position: absolute;
  visibility: hidden;
  font-size: 0.5rem;
  display: block;
  padding: 0.5rem;
  text-decoration: none;
  color: #777;
}
.globaltabs__tab-close:hover {
  color: #000;
}
.globaltabs__tab-toggle {
  font-size: 1.5rem;
  text-decoration: none;
  color: #fff;
  padding: 1rem 2rem;
  display: block;
}
.globaltabs__tab-toggle:hover {
  color: #000;
}
.globaltabs__container {
  display: none;
  visibility: hidden;
  background-color: #fff;
  box-shadow: -3px 0px 17px -4px rgba(0, 0, 0, 0.75);
}
.globaltabs__content {
  display: none;
  visibility: hidden;
  padding: 2rem;
}
.globaltabs__content.active {
  display: block;
  visibility: visible;
}

/*# sourceMappingURL=style.css.map */
